#требуется OAuthАутентификация.sbsl

конст USER_AGENT = "com.garmin.android.apps.connectmobile"
конст OAUTH_CONSUMER_URL = "https://thegarth.s3.amazonaws.com/oauth_consumer.json"
конст SSO = "https://sso.garmin.com/sso"
конст SSO_EMBED = "%{SSO}/embed"
конст SSO_EMBED_PARAMS = {
    "id": "gauth-widget",
    "embedWidget": "true",
    "gauthHost": SSO
}

конст ПУТЬ_ЛЕНТА_АКТИВНОСТЕЙ = "/activitylist-service/activities/newsfeed"

@Глобально
@JsonОбъект(ИгнорироватьНеизвестные = Истина)
структура ЛентаАктивностиДто
    @JsonСвойство("activityList")
    знч Активности: ЧитаемыйМассив<АктивностьЛентыДто> = []
;

@JsonОбъект(ИгнорироватьНеизвестные = Истина)
структура АктивностьЛентыДто
    @JsonСвойство("activityId")
    знч Ид: Число
    @JsonСвойство("activityName")
    знч Имя: Строка
    @JsonСвойство("createDate")
    знч ДатаСоздания: Строка
    @JsonСвойство("startTimeLocal")
    знч ДатаНачала: Строка
    @JsonСвойство("activityType")
    знч ТипАктивности: ТипАктивностиДто
    @JsonСвойство("ownerId")
    знч ИдВладельца: Число
    @JsonСвойство("ownerDisplayName")
    знч ЛогинВладельца: Строка
    @JsonСвойство("ownerFullName")
    знч ПолноеИмяВладельца: Строка
;

@JsonОбъект(ИгнорироватьНеизвестные = Истина)
структура ТипАктивностиДто
    @JsonСвойство("typeId")
    знч Ид: Число
    @JsonСвойство("typeKey")
    знч ТипАктивности: Строка
;

@Глобально
структура Клиент
    пер Аутентифицирован: Булево = Ложь
    пер OAuth1: OAuth1Token
    пер OAuth2: OAuth2Token
    пер OAuth2Токен: Строка

    @Глобально
    метод АутентифицироватьсяПоТокену(OAuth2Токен: Строка)
        этот.OAuth2Токен = OAuth2Токен
        этот.Аутентифицирован = Истина
    ;

    @Глобально
    метод Аутентифицироваться(Логин: Строка, Пароль: Строка)
        пер ПараметрыЗащищенногоСоединения = новый ПараметрыЗащищенногоСоединения()
        ПараметрыЗащищенногоСоединения.БезПроверкиСертификатов = Истина

        // начнем сессию
        исп Результат = ГарминApi.НовыйКлиентHttp(SSO)
            .ЗапросGet("/embed")
            .УстановитьUserAgent(USER_AGENT)
            .УстановитьПараметрыЗапроса(новый ПараметрыUrl(SSO_EMBED_PARAMS))
            .Выполнить()
        знч Куки = Результат.Заголовки.ПолучитьВсе("Set-Cookie")

        пер ЗапросSignin = ГарминApi.НовыйКлиентHttp(SSO)
            .ЗапросGet("/signin") // FIXME
            .УстановитьUserAgent(USER_AGENT)
            .УстановитьПараметрыЗапроса(новый ПараметрыUrl(ГарминApi.ПолучитьПараметрыЗапросаДляВхода()))
            .УстановитьЗаголовок("Set-Cookie", Куки)
        исп РезультатSignin = ЗапросSignin.Выполнить()
        знч ТокенСsrf = ГарминApi.ИзвлечьТокенCsrf(РезультатSignin.Тело.ПрочитатьКакСтроку(Кодировка.Utf8))

        знч ДанныеЗапроса = новый ПараметрыUrl(
            {
                "username": Логин,
                "password": Пароль,
                "embed": "true",
                "_csrf": ТокенСsrf
            }
        )
        исп РезультатSigninPost = ГарминApi.НовыйКлиентHttp(SSO)
            .ЗапросPost("/signin")
            .УстановитьUserAgent(USER_AGENT)
            .УстановитьЗаголовок("Set-Cookie", Куки)
            .УстановитьЗаголовок("referer", ЗапросSignin.АбсолютныйUrl)
            .УстановитьПараметрыЗапроса(новый ПараметрыUrl(ГарминApi.ПолучитьПараметрыЗапросаДляВхода()))
            .УстановитьТипСодержимого("application/x-www-form-urlencoded")
            .УстановитьТело(ДанныеЗапроса.ВСтрокуДанныхФормы())
            .УстановитьМаксимумПеренаправлений(3)
            .Выполнить()
        если РезультатSigninPost.КодСостояния == 429 
            выбросить новый ИсключениеНедопустимоеСостояние("Слишком много запросов на аутентификацию")
        ;
        знч ТелоОтветаHtml = РезультатSigninPost.Тело.ПрочитатьКакСтроку(Кодировка.Utf8)
        знч ЗаголовокСтраницы = ГарминApi.ИзвлечьЗаголовокСтраницы(ТелоОтветаHtml)

        если не ЗаголовокСтраницы == "Success"
            // FIXME нужно свое исключение
            выбросить новый ИсключениеНедопустимоеСостояние("Заголовок: %ЗаголовокСтраницы")
        ;

        знч ШаблонПоискаТикета = новый Образец("embed\\?ticket=([^\"]+)\"")
        знч РезультатПоискаПоШаблону = ШаблонПоискаТикета.НайтиСовпадения(ТелоОтветаHtml)
        знч Тикет = РезультатПоискаПоШаблону.ПервыйИлиУмолчание().Группа(1)

        знч Потребитель = ГарминApi.ПолучитьOAuthПотребителя()
        знч Сессия = новый СессияHttp()
        OAuth1 = OAuth1(Сессия, Потребитель, Тикет)
        OAuth2 = OAuth2(Сессия, Потребитель, OAuth1)
        OAuth2Токен = OAuth2.ВСтрокуЗаголовка()

        Аутентифицирован = Истина
    ;

    @Глобально
    метод ПолучитьАктивностиИзЛентыНовостей(Лимит: Число): ЛентаАктивностиДто
        если не Аутентифицирован
            выбросить новый ИсключениеНедопустимоеСостояние("Пользователь не аутентифицирован")
        ;

        пер Запрос = ГарминApi.НовыйКлиентHttp("https://connectapi.garmin.com")
            .ЗапросGet(ПУТЬ_ЛЕНТА_АКТИВНОСТЕЙ)
            .УстановитьЗаголовок("User-Agent", USER_AGENT)
            .УстановитьЗаголовок("Authorization", OAuth2Токен)
            .УстановитьЗаголовок("Referer", "https://connect.garmin.com/modern/newsfeed")
            .УстановитьПараметрЗапроса("limit", "%Лимит")

        исп Результат = Запрос.Выполнить()
        знч НастройкиЧтения = новый НастройкиЧтенияОбъектовJson()
        НастройкиЧтения.ИнициализироватьОтсутствующиеПоля = Истина
        
        возврат СериализацияJson.ПрочитатьОбъект(Результат.Тело, Тип<ЛентаАктивностиДто>, НастройкиЧтения)          
    ;

    @Глобально
    метод ПолучитьВебСтраницу(АдресСтраницы: Строка): Файл
        если не Аутентифицирован
            выбросить новый ИсключениеНедопустимоеСостояние("Пользователь не аутентифицирован")
        ;

        пер Запрос = ГарминApi.НовыйКлиентHttp(АдресСтраницы)
            .ЗапросGet(АдресСтраницы)
            .УстановитьЗаголовок("User-Agent", USER_AGENT)
            .УстановитьЗаголовок("Authorization", OAuth2Токен)

        исп Результат = Запрос.Выполнить()
        пер Файл = Файлы.СоздатьВременныйФайл("gc", ".html")
        Результат.Тело.КопироватьВФайл(Файл)

        возврат Файл
    ;

    метод OAuth1(СессияHttp: СессияHttp, Потребитель: ПотребительOAuth, Тикет: Строка): OAuth1Token
        знч ЗапросOAuth = ГарминApi.НовыйКлиентHttp("https://connectapi.garmin.com")
            .ЗапросGet("/oauth-service/oauth/preauthorized")
            .УстановитьЗаголовок("User-Agent", USER_AGENT)
            .УстановитьПараметрЗапроса("ticket", Тикет)
            .УстановитьПараметрЗапроса("login-url", SSO_EMBED)
            .УстановитьПараметрЗапроса("accepts-mfa-tokens", "true")

        знч OAuth1Заголовок = OAuthАутентификация.СформироватьOAuth1Заголовок(
            ЗапросOAuth, 
            Потребитель.consumer_key, 
            Потребитель.consumer_secret
        )
        ЗапросOAuth.УстановитьЗаголовок("Authorization", OAuth1Заголовок)

        исп РезультатOAuth = ЗапросOAuth.Выполнить() 
        СессияHttp.Куки = РезультатOAuth.Заголовки.ПолучитьВсе("Set-Cookie") 
        знч Текст = РезультатOAuth.Тело.ПрочитатьКакСтроку(Кодировка.Utf8)
        знч Параметры = новый ПараметрыUrl(Текст)

        возврат новый OAuth1Token(
            Параметры.ПолучитьПервый("oauth_token"), 
            Параметры.ПолучитьПервый("oauth_token_secret")
        )
    ;

    метод OAuth2(СессияHttp: СессияHttp, Потребитель: ПотребительOAuth, OAuth1Token: OAuth1Token): OAuth2Token
        знч ЗапросOAuth2 = ГарминApi.НовыйКлиентHttp("https://connectapi.garmin.com")
            .ЗапросPost("/oauth-service/oauth/exchange/user/2.0")
            .УстановитьЗаголовок("User-Agent", USER_AGENT)
            .УстановитьЗаголовок("Set-Cookie", СессияHttp.Куки)
            .УстановитьТипСодержимого("application/x-www-form-urlencoded")
            .УстановитьТело("")

        знч oAuth2Заголовок = OAuthАутентификация.СформироватьOAuth1Заголовок(
            ЗапросOAuth2, 
            Потребитель.consumer_key, 
            Потребитель.consumer_secret,
            OAuth1Token.oauth_token,
            OAuth1Token.oauth_token_secret
        )
        ЗапросOAuth2.УстановитьЗаголовок("Authorization", oAuth2Заголовок)

        исп РезультатOAuth2 = ЗапросOAuth2.Выполнить() 
        знч НастройкиЧтения = новый НастройкиЧтенияОбъектовJson()
        НастройкиЧтения.ИнициализироватьОтсутствующиеПоля = Истина
        
        возврат СериализацияJson.ПрочитатьОбъект(РезультатOAuth2.Тело, Тип<OAuth2Token>, НастройкиЧтения)
    ;
;

структура СессияHttp
    пер Куки: ЧитаемыйМассив<Строка> = []
;

метод ПолучитьПараметрыЗапросаДляВхода(): Соответствие<Строка, Строка>
    знч ПараметрыЗапроса = новый Соответствие<Строка, Строка>()
    ПараметрыЗапроса.ВставитьВсе(SSO_EMBED_PARAMS)
    ПараметрыЗапроса.Вставить("gauthHost", SSO_EMBED)
    ПараметрыЗапроса.Вставить("service", SSO_EMBED)
    ПараметрыЗапроса.Вставить("source", SSO_EMBED)
    ПараметрыЗапроса.Вставить("redirectAfterAccountLoginUrl", SSO_EMBED)
    ПараметрыЗапроса.Вставить("redirectAfterAccountCreationUrl", SSO_EMBED)

    возврат ПараметрыЗапроса
;

метод НовыйКлиентHttp(Url: Строка): КлиентHttp
    пер ПараметрыЗащищенногоСоединения = новый ПараметрыЗащищенногоСоединения()
    ПараметрыЗащищенногоСоединения.БезПроверкиСертификатов = Истина

    возврат КлиентHttp
        .СБазовымUrl(Url)
        .СПараметрамиЗащиты(ПараметрыЗащищенногоСоединения)
        
;

метод ПолучитьСписокАктивностей(OAuth2Token: OAuth2Token, 
    ДатаНачала: Строка, ДатаОкончания: Строка
    ): Неопределено

    // пер start = 0
    // пер limit = 20

    пер ПараметрыЗащищенногоСоединения = новый ПараметрыЗащищенногоСоединения()
    ПараметрыЗащищенногоСоединения.БезПроверкиСертификатов = Истина
    // пер Запрос = КлиентHttp
    //     .СПараметрамиЗащиты(ПараметрыЗащищенногоСоединения)
    //     .ЗапросGet("https://connectapi.garmin.com/activitylist-service/activities/search/activities")
    //     // .УстановитьЗаголовок("Set-Cookie", РезультатOAuth.Заголовки.ПолучитьВсе("Set-Cookie"))
    //     .УстановитьЗаголовок("User-Agent", USER_AGENT)
    //     .УстановитьЗаголовок("Authorization", OAuth2Token.ВСтрокуЗаголовка())

    //     .УстановитьПараметрЗапроса("startDate", ДатаНачала)
    //     .УстановитьПараметрЗапроса("endDate", ДатаОкончания)
    //     .УстановитьПараметрЗапроса("start", "%start")
    //     .УстановитьПараметрЗапроса("limit", "%limit")

    // исп Результат = Запрос.Выполнить()
    // пер Тело = Результат.Тело.ПрочитатьКакСтроку()

    // Консоль.Записать(Тело)

    // https://connect.garmin.com/web-gateway/newsfeed?limit=10&ownerType=ALL
    пер Запрос = КлиентHttp
        .СПараметрамиЗащиты(ПараметрыЗащищенногоСоединения)
        // activitylist-service/activities/newsfeed
        // https://connect.garmin.com/web-gateway/newsfeed?limit=10&ownerType=ALL
        .ЗапросGet("https://connectapi.garmin.com/activitylist-service/activities/newsfeed")
        // .УстановитьЗаголовок("Set-Cookie", РезультатOAuth.Заголовки.ПолучитьВсе("Set-Cookie"))
        .УстановитьЗаголовок("User-Agent", USER_AGENT)
        .УстановитьЗаголовок("Authorization", OAuth2Token.ВСтрокуЗаголовка())
        .УстановитьЗаголовок("Referer", "https://connect.garmin.com/modern/newsfeed")
        // -H 'Referer: https://connect.garmin.com/modern/newsfeed' \

    исп Результат = Запрос.Выполнить()
    пер Тело = Результат.Тело.ПрочитатьКакСтроку()
    Консоль.Записать(Тело)


    возврат Неопределено
;

метод ПолучитьOAuthПотребителя(): ПотребительOAuth
    пер ПараметрыЗащищенногоСоединения = новый ПараметрыЗащищенногоСоединения()
    ПараметрыЗащищенногоСоединения.БезПроверкиСертификатов = Истина
    исп Ответ = КлиентHttp
        .СПараметрамиЗащиты(ПараметрыЗащищенногоСоединения)    
        .ЗапросGet(OAUTH_CONSUMER_URL)
        .Выполнить()
    
    возврат СериализацияJson.ПрочитатьОбъект(Ответ.Тело, Тип<ПотребительOAuth>)
;

метод ИзвлечьТокенCsrf(Html: Строка): Строка
    пер Шаблон = новый Образец("name=\"_csrf\"\\s+value=\"(.+?)\"")
    знч Результат = Шаблон.НайтиСовпадения(Html, 1)

    возврат Результат.ПервыйИлиУмолчание().Группа(1)
;

структура ПотребительOAuth
    пер consumer_key: Строка 
    пер consumer_secret: Строка  
;

метод ИзвлечьЗаголовокСтраницы(Html: Строка): Строка
    пер Шаблон = новый Образец("<title>(.+?)</title>")
    знч Результат = Шаблон.НайтиСовпадения(Html, 1)

    возврат Результат.ПервыйИлиУмолчание().Группа(1)
;

структура OAuth1Token
    знч oauth_token: Строка
    знч oauth_token_secret: Строка
;

@JsonОбъект(ИгнорироватьНеизвестные = Истина)
структура OAuth2Token
    @JsonСвойство("scope")
    знч _scope: Строка 
    @JsonСвойство("jti")
    знч jti: Строка  
    @JsonСвойство("token_type")
    знч token_type: Строка  
    @JsonСвойство("access_token")
    знч access_token: Строка  
    @JsonСвойство("refresh_token")
    знч refresh_token: Строка  
    @JsonСвойство("expires_in")
    знч expires_in: Число  
    @JsonСвойство("expires_at")
    знч expires_at: Число = 0
    @JsonСвойство("refresh_token_expires_in")
    знч refresh_token_expires_in: Число  
    @JsonСвойство("refresh_token_expires_at")
    знч refresh_token_expires_atjti: Число = 0

    метод ВСтрокуЗаголовка(): Строка
        возврат "%token_type %access_token"
    ;
;
