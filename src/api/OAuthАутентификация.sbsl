конст ПРЕФИКС_OAUTH = "OAuth"
конст РАЗДЕЛИТЕЛЬ_СВОЙСТВ_ЗАГОЛОВКА = ", "
конст МЕТОД_ХЕШИРОВАНИЯ = "HMAC-SHA1"
конст ВЕРСИЯ_OAUTH = "1.0"
конст РАДЕЛИТЕЛЬ_ЗНАЧЕНИЙ_СТРОКИ_ДЛЯ_ПОДПИСИ = "&"

@Глобально
метод СформироватьOAuth1Заголовок(
    Запрос: ЗапросHttp, 
    Ключ: Строка, 
    Секрет: Строка, 
    КлючВладельцаРесурса: Строка? = Неопределено,
    СекретВладельцаРесурса: Строка? = Неопределено
): Строка
    знч ПараметрыOAuth = СформироватьПараметрыOAuth(Ключ, КлючВладельцаРесурса)
    
    знч ПараметрыЗапроса = ОбъединитьПараметрыЗапроса(ПараметрыOAuth, Запрос.ПараметрыЗапроса)
    знч НормализованныеПараметрыЗапроса = ПолучитьУпорядоченныеПараметрыЗапроса(ПараметрыЗапроса)
    знч СтрокаДляПодписи = СформироватьСтрокуДляПодписи(Запрос, НормализованныеПараметрыЗапроса)
    знч СигнатураOAuth = СформироватьСигнатуруOAuth(СтрокаДляПодписи, Секрет, СекретВладельцаРесурса)

    ПараметрыOAuth.Вставить("oauth_signature", СигнатураOAuth)

	возврат "%ПРЕФИКС_OAUTH " + ПараметрыOAuth
        .Преобразовать((КлючЗначение) -> "%{КлючЗначение.Ключ}=\"%{КодироватьUrl(КлючЗначение.Значение)}\"")
        .Соединить(РАЗДЕЛИТЕЛЬ_СВОЙСТВ_ЗАГОЛОВКА)
;

@Глобально
метод СформироватьСигнатуруOAuth(
    СтрокаДляПодписи: Строка, 
    Секрет: Строка, 
    СекретВладельцаРесурса: Строка? = Неопределено
): Строка
    знч КлючHmac = "%Секрет&%СекретВладельцаРесурса"
    знч СигнатураПодписи = ПолучитьСигнатуруПодписиHmacSha1(КлючHmac, СтрокаДляПодписи)

    возврат Кодировки.Base64.КодироватьВСтроку(СигнатураПодписи)    
;

@Локально
метод ПолучитьСигнатуруПодписиHmacSha1(Ключ: Строка, СтрокаДляПодписи: Строка): Байты
    знч Вычислитель = новый ВычислительHmac(Ключ.ВБайты(Кодировка.Utf8), АлгоритмХеширования.Sha1)
    
    возврат Вычислитель.ПолучитьРезультат(СтрокаДляПодписи.ВБайты(Кодировка.Utf8))
;

@Локально
метод СформироватьСтрокуДляПодписи(
    Запрос: ЗапросHttp, 
    ПараметрыЗапроса: Соответствие<Строка, Строка>
): Строка
    знч Url = новый Url(Запрос.АбсолютныйUrl).СПустымиПараметрамиЗапроса()
    знч ПараметрыUrl = новый ПараметрыUrl(ПараметрыЗапроса)
    // без символа "?"
    знч ПараметрыЗапросаСтрокой = ПараметрыUrl.ВКодированнуюСтроку().Подстрока(1)
    знч ЧастиСтроки: Массив<Строка> = [
        Запрос.МетодHttp, 
        КодироватьUrl(Url.ВСтроку()), 
        КодироватьUrl(ПараметрыЗапросаСтрокой)
    ]

    возврат ЧастиСтроки.Соединить(РАДЕЛИТЕЛЬ_ЗНАЧЕНИЙ_СТРОКИ_ДЛЯ_ПОДПИСИ)
;

@Локально
метод ОбъединитьПараметрыЗапроса(
    ПараметрыOAuth: Соответствие<Строка, Строка>, 
    ПараметрыЗапроса: ПараметрыUrl
): Соответствие<Строка, Строка>
    знч НовыеПараметрыЗапроса: Соответствие<Строка, Строка> = {:}
    НовыеПараметрыЗапроса.ВставитьВсе(ПараметрыOAuth)
    ПараметрыЗапроса.Имена()
        .ДляКаждого((Имя) -> НовыеПараметрыЗапроса.Вставить(Имя, ПараметрыЗапроса.ПолучитьПервый(Имя)))    

    возврат НовыеПараметрыЗапроса
;

метод КодироватьUrl(Url: Строка): Строка
    пер Параметры = новый ПараметрыUrl({"key": Url})
    возврат Параметры.ВКодированнуюСтроку().Заменить("?key=", "")
;

@Локально
метод ПолучитьУпорядоченныеПараметрыЗапроса(
    ПараметрыЗапроса: Соответствие<Строка, Строка>
): Соответствие<Строка, Строка>
    
    пер Имена = <Строка>[]
    Имена.ДобавитьВсе(ПараметрыЗапроса.Ключи())
    Имена = Имена.Сортировать(НаправлениеСортировки.ПоВозрастанию)

    пер Результат = <Строка, Строка>{:}
    для Имя из Имена
        Результат.Вставить(Имя, ПараметрыЗапроса.Получить(Имя))
    ;

    возврат Результат
;

метод СформироватьПараметрыOAuth(
    КлючПотребителя: Строка, 
    КлючВладельцаРесурса: Строка? = Неопределено
): Соответствие<Строка, Строка>
    пер OAuthNonce = новый Ууид()
    пер OAuthTimestamp = Момент.Сейчас().ПолучитьОтметкуВремениUnix()

    пер ПараметрыOAuth: Соответствие<Строка, Строка> = {:}
    ПараметрыOAuth.Вставить("oauth_consumer_key", КлючПотребителя)
    ПараметрыOAuth.Вставить("oauth_nonce", "%OAuthNonce".Заменить("-", ""))
    ПараметрыOAuth.Вставить("oauth_signature_method", МЕТОД_ХЕШИРОВАНИЯ)
    ПараметрыOAuth.Вставить("oauth_timestamp", "%OAuthTimestamp")
    ПараметрыOAuth.Вставить("oauth_version", ВЕРСИЯ_OAUTH)

    если КлючВладельцаРесурса это не Неопределено
        ПараметрыOAuth.Вставить("oauth_token", КлючВладельцаРесурса)    
    ;

    возврат ПараметрыOAuth
;